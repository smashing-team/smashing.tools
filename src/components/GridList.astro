---
import { Image } from 'astro:assets';
import { twMerge } from 'tailwind-merge';

import BookmarkIcon from '@/components/icons/bookmark.astro';
import type { AllItems } from '@/pages/[...category].astro';
import type { IBookmark } from '@/types/global';

interface Props {
  items: AllItems;
  withoutPadding?: boolean;
}

const { items, withoutPadding = false } = Astro.props;

const bookmarks = (Astro.cookies.get('bookmarks')?.json() || []) as IBookmark[];

if (process.env.NODE_ENV !== 'development') {
  // eslint-disable-next-line no-console
  console.log('netlify env debug in GRIDLIST', process.env);
}
---

<ul
  role="list"
  class={twMerge(
    'grid grid-cols-1 gap-4 p-2 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 lg:p-4 xl:grid-cols-2 2xl:grid-cols-3 3xl:grid-cols-4',
    withoutPadding && 'p-0  lg:p-0',
  )}
>
  {
    items.map((item) => {
      const isChecked = bookmarks.some((bookmark) => bookmark.id === item.id);
      const isPreview = process.env.CONTEXT !== 'production';
      return (
        <li class="col-span-1">
          <div class="group relative rounded-3xl border border-zinc-200 bg-white dark:border-zinc-800 dark:bg-zinc-900">
            <div class="absolute -inset-px rounded-3xl border-2 border-transparent opacity-0 transition-all [background:linear-gradient(var(--quick-links-hover-bg,theme(colors.zinc.50)),var(--quick-links-hover-bg,theme(colors.neutral.50)))_padding-box,linear-gradient(to_top,theme(colors.zinc.400),theme(colors.zinc.400),theme(colors.zinc.500))_border-box] group-hover:opacity-100 dark:[--quick-links-hover-bg:theme(colors.zinc.800)]" />
            <button
              data-value={item.id}
              data-checked={isChecked.toString()}
              data-bookmark
              aria-label="Bookmark"
              class="group absolute right-4 top-4 z-50 flex h-12 w-12 items-center justify-center rounded-3xl text-zinc-500 opacity-0 transition-all hover:scale-110 group-hover:opacity-100 data-[checked=true]:opacity-100 dark:text-zinc-400 "
            >
              <BookmarkIcon />
            </button>

            <div class="relative overflow-hidden rounded-3xl p-6">
              <Image
                class="h-12 w-12 shrink-0"
                src={`/logo/${item.slug}/${item.data.logo}`}
                alt={item.data.name}
                width={200}
                height={200}
              />

              <h2 class="mt-4 font-sans text-base text-zinc-900 dark:text-white">
                <a
                  href={`/${item.collection}/${item.slug}`}
                  class="flex items-center space-x-2 font-medium"
                >
                  <span class="absolute -inset-px rounded-3xl" />
                  {item.data.name}{' '}
                  {isPreview && (
                    <span class="pointer-events-none inline-flex items-center rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">
                      preview{' '}
                      <span class="ml-1 text-[10px]">
                        (release: {item.data.datePublished})
                      </span>
                    </span>
                  )}
                </a>
              </h2>
              <p class="mt-1 truncate text-sm text-zinc-700 dark:text-zinc-200">
                {item.data.headline}
              </p>
            </div>
          </div>
        </li>
      );
    })
  }
</ul>

<script>
  import { getCookie, setCookie } from '@/utils/cookie';
  import type { IBookmark } from '@/types/global';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const url = new URL(window.location.href);
    const hasBookmarkPage = url.pathname.includes('bookmarks');
    const bookmarkButtons = document.querySelectorAll('[data-bookmark]');

    function parseBookmarks(bookmarks: string) {
      return JSON.parse(bookmarks) as IBookmark[];
    }

    function stringifyBookmarks(bookmarks: IBookmark[]) {
      return JSON.stringify(bookmarks);
    }

    Array.from(bookmarkButtons).forEach((button) =>
      button.addEventListener('click', (e) => {
        const targetElement = e.currentTarget as HTMLButtonElement;
        const id = targetElement.dataset.value as string;

        let bookmarks = getCookie('bookmarks') || '[]';

        const parsedBookmarks = parseBookmarks(bookmarks);
        const bookmarkExists = parsedBookmarks.find((item) => item.id === id);

        const bookmark = {
          id,
          date: new Date().toUTCString(),
        };

        targetElement.dataset.checked = bookmarkExists ? 'false' : 'true';

        const updatedBookmarks = bookmarkExists
          ? parsedBookmarks.filter((item) => item.id !== id)
          : [...parsedBookmarks, bookmark];

        setCookie('bookmarks', stringifyBookmarks(updatedBookmarks));

        if (hasBookmarkPage && bookmarkExists) {
          navigate('/bookmarks');
        }
      }),
    );
  });
</script>
