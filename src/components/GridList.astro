---
import { Image } from 'astro:assets';
import { getEntry } from 'astro:content';
import { twMerge } from 'tailwind-merge';

import BookmarkIcon from '@/components/icons/bookmark.astro';
import { getCategoryTitle } from '@/consts';
import type { AllItems } from '@/pages/[...category].astro';
import type { IBookmark } from '@/types/global';

interface Props {
  items: AllItems;
  withoutPadding?: boolean;
  full?: boolean;
}

const { items, withoutPadding = false, full = false } = Astro.props;

const bookmarks = (Astro.cookies.get('bookmarks')?.json() || []) as IBookmark[];
---

<ul
  role="list"
  class={twMerge(
    'grid grid-cols-1 gap-4 p-2 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 lg:p-4 xl:grid-cols-2 2xl:grid-cols-3 3xl:grid-cols-4',
    withoutPadding && 'p-0 lg:p-0',
    full && 'sm:grid-cols-1 md:grid-cols-2 2xl:grid-cols-2 3xl:grid-cols-2',
  )}
>
  {
    items.map(async (item) => {
      const isChecked = bookmarks.some((bookmark) => bookmark.id === item.id);
      const hasDarkLogo = !!item.data.logoDark;
      const maker = await getEntry('profiles', item.data.maker.id);

      return (
        <li class="col-span-1">
          <div class="group relative rounded-3xl border border-zinc-200 bg-white dark:border-zinc-800 dark:bg-zinc-900">
            <div class="absolute -inset-px rounded-3xl border-2 border-transparent opacity-0 transition-all [background:linear-gradient(var(--quick-links-hover-bg,theme(colors.zinc.50)),var(--quick-links-hover-bg,theme(colors.neutral.50)))_padding-box,linear-gradient(to_top,theme(colors.zinc.400),theme(colors.zinc.400),theme(colors.zinc.500))_border-box] group-hover:opacity-100 dark:[--quick-links-hover-bg:theme(colors.zinc.800)]" />
            <button
              data-value={item.id}
              data-checked={isChecked.toString()}
              data-bookmark
              aria-label="Bookmark"
              class="group absolute right-2 top-2 z-50 flex h-12 w-12 items-center justify-center rounded-3xl text-zinc-500 opacity-100 transition-all hover:scale-110 group-hover:opacity-100 data-[checked=true]:opacity-100 dark:text-zinc-400 lg:opacity-0"
            >
              <BookmarkIcon />
            </button>

            <div class="relative overflow-hidden rounded-3xl p-6">
              <div class="relative inline-block">
                <Image
                  class={twMerge(
                    'h-12 w-12 shrink-0',
                    hasDarkLogo && 'block dark:hidden',
                  )}
                  src={item.data.logo}
                  alt={item.data.name}
                  width={48}
                  height={48}
                />
                {item.data.logoDark && (
                  <Image
                    class="hidden h-12 w-12 shrink-0 dark:block"
                    src={item.data.logoDark}
                    alt={item.data.name}
                  />
                )}
                <Image
                  widths={[20, maker.data.avatar.width]}
                  class="absolute -bottom-2 -right-2 inline-block h-5 w-5 rounded-full bg-white ring-2 ring-white dark:bg-zinc-900 dark:ring-zinc-900 dark:group-hover:ring-zinc-800"
                  src={maker.data.avatar}
                  alt={maker.data.name}
                  width={20}
                  height={20}
                />
              </div>
              <h2 class="mt-4 font-sans text-base text-zinc-900 dark:text-white">
                <a
                  href={`/${item.collection}/${item.slug}`}
                  class="flex items-center space-x-2 font-medium"
                >
                  <span class="absolute -inset-px rounded-3xl" />
                  {item.data.name}
                </a>
              </h2>
              <p class="mt-1 truncate text-sm text-zinc-700 dark:text-zinc-200">
                {item.data.headline}
              </p>

              <div class="mt-4 flex items-center gap-3 pt-2 text-xs text-zinc-700 dark:text-zinc-400">
                <div class="whitespace-nowrap font-medium">
                  <span
                    class={twMerge(
                      'inline-flex items-center rounded-lg bg-zinc-50 px-2 py-1 text-xs font-medium text-zinc-600 ring-1 ring-inset ring-zinc-500/10 dark:bg-zinc-400/10 dark:text-zinc-400 dark:ring-zinc-400/20',
                      item.collection === 'ui-component' &&
                        'dark:bg-blue-400/10 dark:text-blue-400 dark:ring-blue-400/30 bg-blue-50 text-blue-700 ring-blue-700/10',
                      item.collection === 'design-kit' &&
                        'dark:bg-purple-400/10 dark:text-purple-400 dark:ring-purple-400/30 bg-purple-50 text-purple-700 ring-purple-700/10',
                      item.collection === 'starter-kit' &&
                        'dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20 bg-yellow-50 text-yellow-800 ring-yellow-600/20',
                    )}
                  >
                    {getCategoryTitle(item.collection)}
                  </span>
                </div>
                <div class="grow" />
                <div class="flex gap-1 whitespace-nowrap">
                  {item.data.attrs.pricing.map((v: string) => {
                    return (
                      <span class="inline-flex items-center rounded-full bg-zinc-50 px-2 py-1 text-xs font-medium text-zinc-600 ring-1 ring-inset ring-zinc-500/10 dark:bg-zinc-400/10 dark:text-zinc-400 dark:ring-zinc-400/20">
                        {v}
                      </span>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        </li>
      );
    })
  }
</ul>

<script>
  import { getCookie, setCookie } from '@/utils/cookie';
  import type { IBookmark } from '@/types/global';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const url = new URL(window.location.href);
    const hasBookmarkPage = url.pathname.includes('bookmarks');
    const bookmarkButtons = document.querySelectorAll('[data-bookmark]');

    function parseBookmarks(bookmarks: string) {
      return JSON.parse(bookmarks) as IBookmark[];
    }

    function stringifyBookmarks(bookmarks: IBookmark[]) {
      return JSON.stringify(bookmarks);
    }

    Array.from(bookmarkButtons).forEach((button) =>
      button.addEventListener('click', (e) => {
        const targetElement = e.currentTarget as HTMLButtonElement;
        const id = targetElement.dataset.value as string;

        let bookmarks = getCookie('bookmarks') || '[]';

        const parsedBookmarks = parseBookmarks(bookmarks);
        const bookmarkExists = parsedBookmarks.find((item) => item.id === id);

        const bookmark = {
          id,
          date: new Date().toUTCString(),
        };

        targetElement.dataset.checked = bookmarkExists ? 'false' : 'true';

        const updatedBookmarks = bookmarkExists
          ? parsedBookmarks.filter((item) => item.id !== id)
          : [...parsedBookmarks, bookmark];

        setCookie('bookmarks', stringifyBookmarks(updatedBookmarks));

        if (hasBookmarkPage && bookmarkExists) {
          navigate('/bookmarks');
        }
      }),
    );
  });
</script>
