---
import { Image } from 'astro:assets';
import { twMerge } from 'tailwind-merge';

import BookmarkIcon from '@/components/icons/bookmark.astro';
import type { AllItems } from '@/pages/[...category].astro';
import type { IBookmark } from '@/types/global';

interface Props {
  items: AllItems;
}

const { items } = Astro.props;

const bookmarks = (Astro.cookies.get('bookmarks')?.json() || []) as IBookmark[];
---

<ul
  role="list"
  class="grid grid-cols-1 gap-4 p-2 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 lg:p-6 xl:grid-cols-3 2xl:grid-cols-4 3xl:grid-cols-5"
>
  {
    items.map((item) => (
      <li id="tool-item" class="col-span-1">
        <div class="group relative rounded-xl border border-zinc-200 dark:border-zinc-800 dark:bg-zinc-900">
          <div class="absolute -inset-px rounded-xl border-2 border-transparent opacity-0 transition-all [background:linear-gradient(var(--quick-links-hover-bg,theme(colors.zinc.50)),var(--quick-links-hover-bg,theme(colors.neutral.50)))_padding-box,linear-gradient(to_top,theme(colors.zinc.400),theme(colors.zinc.400),theme(colors.zinc.500))_border-box] group-hover:opacity-100 dark:[--quick-links-hover-bg:theme(colors.zinc.800)]" />
          <button
            data-value={item.id}
            data-checked={bookmarks
              .some((bookmark) => bookmark.id === item.id)
              .toString()}
            id="bookmark-button"
            class="group absolute right-3 top-3 z-50 hidden text-zinc-500 group-hover:block dark:text-zinc-400"
          >
            <BookmarkIcon />
          </button>
          <div class="relative overflow-hidden rounded-xl p-6">
            <Image
              class={twMerge(
                'h-8 w-8 shrink-0',
                item.data.logoRounded && 'rounded',
              )}
              src={item.data.logo}
              alt={item.data.name}
            />
            <h2 class="mt-4 font-sans text-base text-zinc-900 dark:text-white">
              <a href={`/${item.collection}/${item.slug}/`} class="">
                <span class="absolute -inset-px rounded-xl" />
                {item.data.name}
              </a>
            </h2>
            <p class="mt-1 truncate text-sm text-zinc-700 dark:text-zinc-400">
              {item.data.headline}
            </p>
          </div>
        </div>
      </li>
    ))
  }
</ul>

<script>
  import { getCookie, setCookie } from '@/utils/cookie';
  import type { IBookmark } from '@/types/global';
  const url = new URL(window.location.href);

  const hasBookmarkPage = url.pathname.includes('bookmarks');

  document.addEventListener('astro:page-load', () => {
    const bookmarkButtons = document.querySelectorAll('#bookmark-button');

    Array.from(bookmarkButtons).forEach((button) =>
      button.addEventListener('click', (e) => {
        const targetElement = e.currentTarget as HTMLButtonElement;
        const id = targetElement.dataset.value;

        const bookmarks = getCookie('bookmarks');

        const bookmark = {
          id,
          date: new Date(),
        };

        if (bookmarks) {
          const parsedBookmarks = JSON.parse(bookmarks) as IBookmark[];

          if (parsedBookmarks.find((item) => item.id === id)) {
            const filteredBookmarks = parsedBookmarks.filter(
              (item) => item.id !== id,
            );

            targetElement.dataset.checked = 'false';

            setCookie('bookmarks', JSON.stringify(filteredBookmarks));

            if (hasBookmarkPage) {
              targetElement.closest('#tool-item')!.remove();
              document.querySelector('#bookmark-count')!.textContent =
                '(' + filteredBookmarks.length + ')';
            }
          } else {
            targetElement.dataset.checked = 'true';

            setCookie(
              'bookmarks',
              JSON.stringify([...parsedBookmarks, bookmark]),
            );
          }
        } else {
          setCookie('bookmarks', JSON.stringify([bookmark]));
        }
      }),
    );
  });
</script>
