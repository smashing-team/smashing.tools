---
import { getCollection } from 'astro:content';

import GridList from '@/components/GridList.astro';
import Header from '@/components/Header.astro';
import MyQueryString from '@/utils/myQueryString';

import { CATEGORIES } from '../consts';
import AppLayout from '../layouts/AppLayout.astro';

export const prerender = false;

const { category } = Astro.params;
const { search } = Astro.url;
const searchParam = MyQueryString.parse(search);

const activeCategory = CATEGORIES.find((cat) => cat.category === category);
if (!activeCategory) return Astro.redirect('/404');

const allItems = [
  ...(await getCollection('code')),
  ...(await getCollection('design')),
];

let items = allItems.sort(
  (a, b) => a.data.datePublished.valueOf() - b.data.datePublished.valueOf(),
);

if (activeCategory.category) {
  items = items.filter((item) => item.collection === category);
}

if (searchParam) {
  Object.keys(searchParam).forEach((key) => {
    items = items.filter((item) =>
      searchParam[key]?.some((el) => {
        // TODO: type error
        // @ts-ignore
        return item.data[key]?.includes(el);
      }),
    );
  });
}

// let's generate facets based on the items
/**
 * example:
 * 
 * export const FACETS = {
  pricing: [
    { value: 'free', label: 'Free', count: 0 },
    { value: 'subscription', label: 'Subscription', count: 0 },
    { value: 'one-time-fee', label: 'One-time fee', count: 0 },
  ],
  language: [
    { value: 'javascript', label: 'JavaScript', count: 0 },
    { value: 'typescript', label: 'TypeScript', count: 0 },
    { value: 'python', label: 'Python', count: 0 },
    { value: 'ruby', label: 'Ruby', count: 0 },
    { value: 'go', label: 'Go', count: 0 },
    { value: 'c-sharp', label: 'C#', count: 0 },
    { value: 'java', label: 'Java', count: 0 },
    { value: 'rust', label: 'Rust', count: 0 },
  ],
};
 */

const facetKeys = [
  'pricing',
  'runtime',
  'api',
  'database',
  'framework',
  'language',
  'style',
  'testing',
  'uiKit',
  'uiLibrary',
  'componentCount',
  'pageExampleCount',
  'features',
  'compatibility',
] as const;

const facets = allItems.reduce((acc, item) => {
  facetKeys.forEach((key) => {
    const data = item.data as any;

    if (!acc[key]) {
      acc[key] = [];
    }

    if (data[key]) {
      // check if it is array
      if (Array.isArray(data[key])) {
        data[key].forEach((value: any) => {
          if (!acc[key].find((pr: any) => pr.value === value)) {
            acc[key].push({ value, count: 1 });
          } else {
            // eslint-disable-next-line no-plusplus
            acc[key].find((pr: any) => pr.value === value).count++;
          }
        });
      } else {
        const value = data[key] as string;
        if (!acc[key].find((pr: any) => pr.value === value)) {
          acc[key].push({ value, count: 1 });
        } else {
          // eslint-disable-next-line no-plusplus
          acc[key].find((pr: any) => pr.value === value).count++;
        }
      }
    }
  });

  // pricing.map((p) => {
  //   if (!acc.pricing.find((pr) => pr.value === p)) {
  //     acc.pricing.push({ value: p, label: p, count: 1 });
  //   } else {
  //     acc.pricing.find((pr) => pr.value === p).count++;
  //   }
  // });

  return acc;
}, {} as any);

export type AllItems = typeof items;
---

<AppLayout facets={facets} activeCategory={activeCategory.slug}>
  <Header />
  <GridList items={items} />
</AppLayout>
