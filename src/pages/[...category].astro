---
import { getCollection } from 'astro:content';

import GridList from '@/components/GridList.astro';
import { getFacets } from '@/utils/facets';
import Query from '@/utils/query';

import { CATEGORIES } from '../consts';
import AppLayout from '../layouts/AppLayout.astro';

export const prerender = false;

const { category } = Astro.params;
const { search } = Astro.url;
const searchParam = Query.parseSearchParam(search);

const activeCategory = CATEGORIES.find((cat) => cat.category === category);
if (!activeCategory) return Astro.redirect('/404');

const starterKitItems = (await getCollection('starter-kit')) || [];
const uiKitItems = (await getCollection('ui-kit')) || [];

const allItems = [...starterKitItems, ...uiKitItems];

let items = allItems.sort(
  (a, b) => b.data.datePublished.valueOf() - a.data.datePublished.valueOf(),
);

if (activeCategory.category) {
  items = items.filter((item) => item.collection === category);
}

if (Object.values(searchParam).length) {
  items = items.filter((item) => {
    for (const key in searchParam) {
      // TODO: type error
      // @ts-ignore
      if (!searchParam[key]?.every((el) => item.data[key]?.includes(el))) {
        return false;
      }
    }
    return true;
  });
}

const filteredFacets = getFacets(items, activeCategory.slug);
const facets = getFacets(
  // eslint-disable-next-line no-nested-ternary
  activeCategory.slug === '/'
    ? allItems
    : activeCategory.category === 'starter-kit'
      ? starterKitItems
      : uiKitItems,
  activeCategory.slug,
  filteredFacets,
  searchParam,
);

export type AllItems = typeof items;
---

<AppLayout facets={facets} activeCategory={activeCategory.slug}>
  <GridList items={items} />
</AppLayout>
