---
import { Image } from 'astro:assets';
import { type CollectionEntry, getEntry } from 'astro:content';
import { Icon } from 'astro-icon';
import { twMerge } from 'tailwind-merge';

import CommandMenu from '@/components/react/CommandMenu';
import { HeroSlider } from '@/components/react/HeroSlider';
import { ModeToggle } from '@/components/react/ModeToggle';
import { NavigateKeys } from '@/components/react/NavigateKeys';
import { type CategorySlugs, getCategoryTitle } from '@/consts';
import { getAllFilters } from '@/utils/reader';

import smashingLogo from '../../public/logo.svg';
import BaseHead from '../components/BaseHead.astro';

type Props = (CollectionEntry<'starter-kit'>['data'] &
  CollectionEntry<'design-kit'>['data'] &
  CollectionEntry<'ui-component'>['data']) & {
  collection: CategorySlugs;
  slug?: string;
  prevSlug?: string;
  nextSlug?: string;
};

const {
  name,
  headline,
  logo,
  logoDark,
  collection,
  prevSlug,
  nextSlug,
  heroSlider,
  publisher,
  maker,
  attrs,
  url,
  repositoryUrl,
  previewUrl,
  slug,
} = Astro.props;

const heroSliderImages = (heroSlider || [])
  ?.filter((image) => image.discriminant === 'heroSlider')
  .map((slide) => {
    return slide.value.image;
  });

const hasDarkLogo = !!logoDark;

const websiteUrl = new URL(url);
websiteUrl.searchParams.append('ref', 'smashing.tools');

const repoUrl = repositoryUrl ? new URL(repositoryUrl) : undefined;
repoUrl?.searchParams.append('ref', 'smashing.tools');

const prevUrl = previewUrl ? new URL(previewUrl) : undefined;
prevUrl?.searchParams.append('ref', 'smashing.tools');

const publisherData = await getEntry('profiles', publisher.id);
const makerData = await getEntry('profiles', maker.id);
const allFilters = getAllFilters();
---

<html lang="en">
  <head>
    <BaseHead title={name} description={headline} slug={slug} />
  </head>

  <body>
    <div class="mx-auto h-full w-full max-w-2xl">
      <div
        data-pagefind-ignore
        id="tool-layout-header"
        class="fixed left-0 top-0 z-50 w-full p-2 px-4"
      >
        <div
          class="mx-auto mt-2 flex w-full max-w-2xl items-center gap-3 rounded-full bg-zinc-600/5 px-4 py-1 backdrop-blur-sm dark:bg-zinc-200/5"
        >
          <a href="/" class="absolute z-[975]">
            <img
              class="mx-auto h-8 w-8 dark:text-white"
              src={smashingLogo.src}
              alt="smashing.tools"
              sizes="(min-width: 1024px) 20rem, (min-width: 640px) 16rem, 12rem"
            /></a
          >
          <div class="grow"></div>
          <ModeToggle align="end" client:load />
        </div>
      </div>
      <header class="px-4">
        <div class="hidden" data-pagefind-ignore>
          <CommandMenu client:idle />
        </div>
        <div class="relative z-10 mx-auto px-4 pb-4 pt-24">
          <div class="relative block w-24 overflow-hidden">
            <Image
              data-pagefind-meta="image[src], image_alt[alt]"
              class={twMerge('w-full', hasDarkLogo && 'block dark:hidden')}
              src={logo}
              alt={name}
              width={200}
              height={200}
            />
            {
              logoDark && (
                <Image
                  class="hidden w-full dark:block"
                  src={logoDark}
                  alt={name}
                  width={200}
                  height={200}
                />
              )
            }
          </div>
          <div class="mt-6 text-left">
            <p
              class="text-2xl font-medium text-zinc-900 dark:text-zinc-50"
              data-pagefind-meta="name"
            >
              {name}
            </p>
            <p
              data-pagefind-meta="headline"
              class="mt-3 text-lg font-normal text-zinc-700 dark:text-zinc-200"
            >
              {headline}
            </p>
            <div class="mt-4 flex flex-wrap gap-2">
              <span
                class={twMerge(
                  'inline-flex items-center rounded-lg bg-zinc-50 px-2 py-1 text-xs font-medium text-zinc-600 ring-1 ring-inset ring-zinc-500/10 dark:bg-zinc-400/10 dark:text-zinc-400 dark:ring-zinc-400/20',
                  collection === 'ui-component' &&
                    'dark:bg-blue-400/10 dark:text-blue-400 dark:ring-blue-400/30 bg-blue-50 text-blue-700 ring-blue-700/10',
                  collection === 'design-kit' &&
                    'dark:bg-purple-400/10 dark:text-purple-400 dark:ring-purple-400/30 bg-purple-50 text-purple-700 ring-purple-700/10',
                  collection === 'starter-kit' &&
                    'dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20 bg-yellow-50 text-yellow-800 ring-yellow-600/20',
                )}
              >
                {getCategoryTitle(collection)}
              </span>
              {
                Object.entries(attrs).map(([key, value]) => {
                  return value?.map((v: string) => {
                    return (
                      <span class="inline-flex items-center rounded-full bg-zinc-50 px-2 py-1 text-xs font-medium text-zinc-600 ring-1 ring-inset ring-zinc-500/10 dark:bg-zinc-400/10 dark:text-zinc-400 dark:ring-zinc-400/20">
                        {allFilters[`${key}|${v}`]}
                      </span>
                    );
                  });
                })
              }
            </div>

            <div data-people class="flex items-center space-x-6">
              {
                makerData && (
                  <a class="group" href={`/profile/${makerData.id}`}>
                    <div class="mt-6 flex items-center">
                      <div>
                        <Image
                          class="inline-block h-9 w-9 rounded-full"
                          src={makerData.data.avatar}
                          alt={makerData!.data.name}
                        />
                      </div>
                      <div class="ml-2">
                        <p class="text-[10px] font-medium text-zinc-500 transition-colors group-hover:text-zinc-700 dark:group-hover:text-zinc-400">
                          Crafted by
                        </p>
                        <p class="text-xs font-medium text-zinc-400 transition-colors group-hover:text-zinc-950 group-hover:underline dark:group-hover:text-zinc-50">
                          {makerData!.data.name}
                        </p>
                      </div>
                    </div>
                  </a>
                )
              }
              <a class="group" href={`/profile/${publisherData.id}`}>
                <div class="mt-6 flex items-center">
                  <div>
                    <Image
                      class="inline-block h-7 w-7 rounded-full"
                      src={publisherData.data.avatar}
                      alt={publisherData!.data.name}
                    />
                  </div>
                  <div class="ml-2">
                    <p
                      class="text-[10px] font-medium text-zinc-500 transition-colors group-hover:text-zinc-700 dark:group-hover:text-zinc-400"
                    >
                      Published by
                    </p>
                    <p
                      class="text-xs font-medium text-zinc-400 transition-colors group-hover:text-zinc-950 group-hover:underline dark:group-hover:text-zinc-50"
                    >
                      {publisherData!.data.name}
                    </p>
                  </div>
                </div>
              </a>
            </div>
          </div>
          <section class="mt-8">
            <ul
              data-pagefind-ignore
              role="list"
              class="mt-4 flex items-center gap-4 text-base font-medium leading-7"
            >
              <li>
                <a
                  target="_blank"
                  href={websiteUrl.toString()}
                  class="flex items-center rounded-3xl bg-zinc-50 px-4 py-3 text-base font-semibold text-zinc-900 shadow-sm ring-1 ring-inset ring-zinc-300 hover:bg-zinc-100/75 dark:ring-zinc-100 dark:hover:bg-white/95"
                >
                  <Icon
                    name="tabler:external-link"
                    class="relative -left-0.5 mr-1.5 h-5 w-5 text-zinc-400 dark:text-zinc-800"
                  />
                   Website
                </a>
              </li>
              {
                repoUrl && (
                  <li>
                    <a
                      target="_blank"
                      href={repoUrl.toString()}
                      class="flex items-center rounded-3xl px-4 py-3 text-base font-semibold hover:bg-zinc-100/75  dark:hover:bg-white/5"
                    >
                      <Icon
                        name="tabler:brand-github"
                        class="relative -left-0.5 mr-1.5 h-5 w-5"
                      />
                      Repository
                    </a>
                  </li>
                )
              }
              {
                prevUrl && (
                  <li>
                    <a
                      target="_blank"
                      href={prevUrl.toString()}
                      class="flex items-center rounded-3xl px-4 py-3 text-base font-semibold hover:bg-zinc-100/75  dark:hover:bg-white/5"
                    >
                      <Icon
                        name={
                          prevUrl.toString().includes('figma')
                            ? 'tabler:brand-figma'
                            : 'tabler:external-link'
                        }
                        class="relative -left-0.5 mr-1.5 h-5 w-5"
                      />
                      Preview
                    </a>
                  </li>
                )
              }
            </ul>
          </section>
        </div>
      </header>
      <main>
        {
          heroSliderImages.length > 0 && (
            <HeroSlider images={heroSliderImages} client:visible />
          )
        }
        <article
          class="prose prose-zinc relative mx-auto h-full w-full px-6 pb-24 dark:prose-invert"
        >
          <slot data-pagefind-meta="content" />
          <NavigateKeys
            client:load
            prevHref={prevSlug && `/${collection}/${prevSlug}`}
            nextHref={nextSlug && `/${collection}/${nextSlug}`}
          />
        </article>
      </main>
    </div>
  </body>
</html>
